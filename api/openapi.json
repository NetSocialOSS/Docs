{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI SocialFlux Stats",
    "description": "A sample API that provides statistics for the SocialFlux database",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.netsocial.app"
    }
  ],
  "paths": {
    "/stats/partners/@all": {
      "get": {
        "summary": "Get total count of partners",
        "description": "Returns the total count of partners in the SocialFlux database.",
        "tags": ["Statistics"],
        "responses": {
          "200": {
            "description": "Successful response with the total count of partners.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_partner": {
                      "type": "integer",
                      "description": "The total count of partners.",
                      "example": 3
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stats/posts/@all": {
      "get": {
        "summary": "Get total count of posts",
        "description": "Returns the total count of posts in the SocialFlux database.",
        "tags": ["Statistics"],
        "responses": {
          "200": {
            "description": "Successful response with the total count of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_posts": {
                      "type": "integer",
                      "description": "The total count of posts.",
                      "example": 100
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    
    "/stats/users/@all": {
      "get": {
        "summary": "Get total count of registered users",
        "description": "Returns the total count of registered users in the SocialFlux database.",
        "tags": ["Statistics"],
        "responses": {
          "200": {
            "description": "Successful response with the total count of registered users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_registered_user": {
                      "type": "integer",
                      "description": "The total count of registered users.",
                      "example": 500
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "summary": "Get user details by username",
        "description": "Retrieves details of a user by their username from the SocialFlux database.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "description": "The username of the user to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with user details and posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Username of the user"
                    },
                    "isVerified": {
                      "type": "boolean",
                      "description": "Indicates if the user is verified"
                    },
                    "isOrganisation": {
                      "type": "boolean",
                      "description": "Indicates if the user is an organization"
                    },
                    "isDeveloper": {
                      "type": "boolean",
                      "description": "Indicates if the user is a developer"
                    },
                    "isOwner": {
                      "type": "boolean",
                      "description": "Indicates if the user is an owner"
                    },
                    "isPartner": {
                      "type": "boolean",
                      "description": "Indicates if the user is a partner"
                    },
                    "displayname": {
                      "type": "string",
                      "description": "Display name of the user"
                    },
                    "bio": {
                      "type": "string",
                      "description": "Bio of the user"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time when the user account was created"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Links associated with the user"
                    },
                    "posts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "ID of the post"
                          },
                          "title": {
                            "type": "string",
                            "description": "Title of the post"
                          },
                          "content": {
                            "type": "string",
                            "description": "Content of the post"
                          },
                          "author": {
                            "type": "string",
                            "description": "Username of the post author"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time when the post was created"
                          },
                          "hearts": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of usernames who liked the post"
                          }
                        }
                      },
                      "description": "Array of posts made by the user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Database connection not available"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
